#!/usr/bin/env bash
set -o errexit

[ -z "$1" ] && echo "Please specify a domain name (ex: myapp.test)" && exit

DOMAIN="$1"

echo "Setting up domain: $DOMAIN"

# Detect docker-compose command
if command -v docker-compose &> /dev/null; then
    DOCKER_COMPOSE="docker-compose"
elif docker compose version &> /dev/null 2>&1; then
    DOCKER_COMPOSE="docker compose"
else
    echo "Error: Neither 'docker-compose' nor 'docker compose' command found."
    exit 1
fi

# Add domain to hosts file if not already present
if ! grep -q "$DOMAIN" /etc/hosts; then
    echo "Your system password is needed to add an entry to /etc/hosts..."
    echo "127.0.0.1 $DOMAIN" | sudo tee -a /etc/hosts
    echo "::1 $DOMAIN" | sudo tee -a /etc/hosts
    echo "âœ… Domain added to /etc/hosts"
else
    echo "âœ… Domain already exists in /etc/hosts"
fi

# Update .env file
if [ -f .env ]; then
    # Backup current .env
    cp .env .env.backup
    
    # Update APP_URL
    if grep -q "^APP_URL=" .env; then
        sed -i.bak "s|^APP_URL=.*|APP_URL=https://$DOMAIN|" .env
    else
        echo "APP_URL=https://$DOMAIN" >> .env
    fi
    
    # Update APP_DOMAIN for docker-compose
    if grep -q "^APP_DOMAIN=" .env; then
        sed -i.bak "s|^APP_DOMAIN=.*|APP_DOMAIN=$DOMAIN|" .env
    else
        echo "APP_DOMAIN=$DOMAIN" >> .env
    fi
    
    # Clean up backup files
    rm -f .env.bak
    
    echo "âœ… Updated .env file with new domain"
fi

# Ensure containers are running
echo "Ensuring containers are running..."
$DOCKER_COMPOSE up -d nginx laravel.test
chmod +x ./docker/bin/wait-for-container
./docker/bin/wait-for-container nginx

# Generate SSL certificate
echo "Generating SSL certificate..."
./docker/bin/setup-ssl "$DOMAIN"

# Update nginx configuration with the domain
cat > docker/nginx/conf/server_name.conf << EOF
# Generated domain configuration
upstream laravel_app {
    server laravel.test:80;
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name $DOMAIN www.$DOMAIN;
    return 301 https://\$host\$request_uri;
}

# HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name $DOMAIN www.$DOMAIN;

    ssl_certificate /etc/nginx/certs/cert.crt;
    ssl_certificate_key /etc/nginx/certs/cert.key;

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: ws: wss: data: blob: 'unsafe-inline' 'unsafe-eval';" always;

    # Proxy settings
    proxy_set_header Host \$http_host;
    proxy_set_header X-Real-IP \$remote_addr;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto \$scheme;
    proxy_set_header X-Forwarded-Host \$host;
    proxy_set_header X-Forwarded-Port \$server_port;

    # WebSocket support
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "upgrade";

    location / {
        proxy_pass http://laravel_app;
        proxy_redirect off;
        proxy_read_timeout 90s;
        proxy_connect_timeout 90s;
        proxy_send_timeout 90s;
    }

    # Additional locations for assets if needed
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|pdf|doc|docx|xls|xlsx|ppt|pptx|txt|svg|svgz|eot|ttf|woff|woff2)\$ {
        proxy_pass http://laravel_app;
        expires 30d;
        add_header Cache-Control "public, immutable";
    }
}
EOF

echo "âœ… Nginx configuration updated"

# Restart containers to apply changes
echo "Restarting containers..."
$DOCKER_COMPOSE restart nginx

echo ""
echo "âœ… Domain setup complete!"
echo ""
echo "Your application is now available at:"
echo "  ðŸ”’ https://$DOMAIN"
echo ""
echo "The SSL certificate is trusted by your system."
echo "You may need to restart your browser if it was already open."
